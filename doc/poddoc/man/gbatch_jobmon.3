.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "gbatch_jobmon 3"
.TH gbatch_jobmon 3 "2009-05-18" "GNUbatch Release 1" "GNUbatch Batch Scheduler"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gbatch_jobmon \- monitor changes to the job queue
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fB#include <gbatch.h>\fR
.PP
\&\fBint gbatch_jobmon(const int\fR
\&\fIfd\fR\fB, void (*\fR\fIfn\fR\fB)(const int))\fR
.PP
\&\fBint gbatch_setmon(const int\fR
\&\fIfd\fR\fB, \s-1HWND\s0\fR
\&\fIhWnd\fR\fB, \s-1UINT\s0\fR
\&\fIwMsg\fR\fB)\fR
.PP
\&\fBint gbatch_procmon(const int\fR
\&\fIfd\fR\fB)\fR
.PP
\&\fBvoid gbatch_unsetmon(const int\fR \fIfd\fR\fB)\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Unix and GNU/Linux"
.IX Subsection "Unix and GNU/Linux"
The function \fB\f(BIgbatch_jobmon()\fB\fR is used to set a function to monitor
changes to the job queue.
.PP
\&\fIfd\fR is a file descriptor which was previously returned by a
successful call to \fIgbatch_open\fR\|(3).
.PP
\&\fIfn\fR is a pointer to a function which must be declared as returning
void and taking one \f(CW\*(C`const int\*(C'\fR argument. Alternatively, this may be
\&\f(CW\*(C`NULL\*(C'\fR to cancel monitoring.
.PP
The function \fIfn\fR will be called upon each change to the job
list. The argument passed will be \fIfd\fR. Note that any changes to the
job queue are reported (including changes on other hosts whose details
are passed through) as the \s-1API\s0 does not record which jobs the user is
interested in.
.SS "Windows"
.IX Subsection "Windows"
The \fBgbatch_setmon\fR routine may be used to monitor changes to the job
queue or variable list. Its parameters are as follows.
.PP
\&\fIfd\fR is a file descriptor previously returned by \fBgbatch_open\fR.
.PP
\&\fIhWnd\fR is a windows handle to which messages should be sent.
.PP
\&\fIwMsg\fR is the message id to be passed to the window (\f(CW\*(C`WM_USER\*(C'\fR or a
constant based on this is suggested).
.PP
To decode the message, the \fBgbatch_procmon\fR is provided. This returns
\&\f(CW\*(C`XBWINAPI_JOBPROD\*(C'\fR to indicate a change or changes to the job queue
and \f(CW\*(C`XBWINAPI_VARPROD\*(C'\fR to indicate a change or changes to the variable
list. If there are changes to both, two or more messages will be sent,
each of which should be decoded via separate \fBgbatch_procmon\fR calls.
.PP
To cancel monitoring, invoke the routine
.PP
.Vb 1
\& gbatch_unsetmon(fd)
.Ve
.PP
If no monitoring is in progress, or the descriptor is invalid, this
call is just ignored.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
The function \fB\f(BIgbatch_jobmon()\fB\fR returns 0 if successful otherwise the
error code \f(CW\*(C`XBAPI_INVALID_FD\*(C'\fR if the file descriptor is
invalid. Invalid \fIfn\fR parameters will not be detected and the
application program will probably crash.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 4
\& void note_mod(const int fd)  {
\&     job_changes++;
\& }
\& . . .
\&
\& gbatch_jobmon(fd, note_mod);
\& . . .
\&
\& if (job_changes) { /* handle changes */
\& . . .
\& }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgbatch_close\fR\|(3),
\&\fIgbatch_open\fR\|(3),
\&\fIgbatch_varmon\fR\|(3).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009 Free Software Foundation, Inc.
This is free software. You may redistribute copies of it under the
terms of the \s-1GNU\s0 General Public License
<http://www.gnu.org/licenses/gpl.html>.
There is \s-1NO\s0 \s-1WARRANTY\s0, to the extent permitted by law.
.SH "AUTHOR"
.IX Header "AUTHOR"
John M Collins, Xi Software Ltd.
