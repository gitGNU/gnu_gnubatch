.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "gbatch_jobadd 3"
.TH gbatch_jobadd 3 "2009-05-18" "GNUbatch Release 1" "GNUbatch Batch Scheduler"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gbatch_jobadd \- create a new job
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fB#include <gbatch.h>\fR
.PP
\&\fB\s-1FILE\s0 *gbatch_jobadd(const int\fR
\&\fIfd\fR\fB, apiBtjob *\fR\fIjobd\fR\fB)\fR
.PP
\&\fBint gbatch_jobres(const int\fR
\&\fIfd\fR\fB, jobno_t *\fR\fIjobno\fR\fB)\fR
.PP
\&\fBint gbatch_jobadd(const int\fR
\&\fIfd\fR\fB, const int\fR
\&\fIinfile\fR\fB, int(*\fR\fIfn\fR\fB)(int,void*,unsigned), apiBtjob *\fR\fIjobd\fR\fB)\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The function \fBgbatch_jobadd\fR, is used to create a new \fBGNUbatch\fR job.
.PP
There are two forms of \fBgbatch_jobadd\fR. The first form, together with
\&\fBgbatch_jobres\fR, is used to create jobs using the Unix or GNU/Linux
version of the \s-1API\s0.
.PP
The second form is used under Windows as there is no acceptable
substitute for the \fIpipe\fR\|(2) system call.
.PP
In both forms of the call, \fIfd\fR is a file descriptor which was
previously returned by a successful call to \fIgbatch_open\fR\|(3).
.PP
\&\fIjobd\fR is a pointer to a structure containing the attributes of the
job to be created apart from the job script.
.PP
The difference between the two versions of \fBgbatch_jobadd\fR is in the
method of passing the job script.
.SS "Unix and GNU/Linux"
.IX Subsection "Unix and GNU/Linux"
The Unix and GNU/Linux \s-1API\s0 version returns a \fIstdio\fR file descriptor
which may be used with the standard I/O functions \fIfputs\fR\|(3), \fIfprintf\fR\|(3)
etc to write the job script. When complete, the job script should be
closed using \fIfclose\fR\|(3). The result of the job submission is then
collected using the \fBgbatch_jobres\fR routine, which assigns the job number
to the contents of the \fIjobno\fR parameter and returns zero as its
result. The job number is also placed into the \f(CW\*(C`bj_job\*(C'\fR field in the
job structure.
.PP
For reasons of correctly synchronising socket messages, be sure to
call \fBgbatch_jobres\fR immediately after the call to \fIfclose\fR\|(3), even if you
do not require the answer.
.PP
If there is any kind of error, then depending upon at what point the
error is detected, either \fBgbatch_jobadd\fR will return \f(CW\*(C`NULL\*(C'\fR, leaving
the error code in the external variable \fBgbatch_dataerror\fR, or
\&\fBgbatch_jobres\fR will return the error as its result rather than zero.
.SS "Windows"
.IX Subsection "Windows"
In the case of the Windows version, the specified function \fIfn\fR is
invoked with parameters similar to \fBread\fR to read data to pass across
as the job script, the argument \fIinfile\fR being passed as a file
handle as the first argument to \fIfn\fR.
.PP
\&\fIfn\fR may very well be \fBread\fR. The reason for the routine not
invoking \fBread\fR itself is partly flexibility but mostly because some
versions of Windows DLLs do not allow \fBread\fR to be invoked directly
from within it.
.PP
\&\fBN.B. This routine is particularly susceptible to peculiar effects
due to assignment of insufficient stack space.\fR
.PP
The return value is zero for success, in which case the job number
will be assigned to the \f(CW\*(C`bj_job\*(C'\fR field of \fIjobd\fR, or an error
code. The error code is also assigned to the external variable
\&\f(CW\*(C`gbatch_dataerror\*(C'\fR for consistency with the Unix version.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
The Unix version of \fBgbatch_jobadd\fR returns \f(CW\*(C`NULL\*(C'\fR if unsuccessful,
placing the error code in the external variable \f(CW\*(C`gbatch_dataerror\*(C'\fR.
.PP
The Windows version of \fBgbatch_jobadd\fR and the \fBxb_jobres\fR under Unix
return zero if successful, otherwise an error code.
.PP
The error codes which may be returned are defined in the include file
\&\efBgbatch.h\efR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example creates a job from standard input:
.PP
.Vb 4
\& int fd, ret, ch;
\& FILE *outf;
\& jobno_t jn;
\& apiBtjob outj;
\&
\& fd = gbatch_open("myhost", (char *) 0);
\& if (fd < 0) { /* error handling */
\&     . . .
\& }
\&
\& /* always clear the structure first */
\& memset((void *)&outj, \*(Aq\e0\*(Aq, sizeof(outj));
\&
\& /* only the following parameters are compulsory */
\&
\& outj.h.bj_pri = 150;
\& outj.h.bj_ll = 1000;
\& outj.h.bj_mode.u_flags = JALLMODES;
\& outj.h.bj_exits.elower = 1;
\& outj.h.bj_eupper = 255;
\& outj.h.bj_ulimit = 0x10000;
\& strcpy(outj.h.bj_cmdinterp, "sh"); /* NB assumes sh defined */
\& gbatch_putdirec(&outj, "~/work");
\&
\& /* set progress code to zero */
\& outj.h.bj_progress = BJP_CANCELLED;
\&
\& /* set up a time constraint */
\& outj.h.bj_times.tc_istime = 1;
\& outj.h.bj_times.tc_nexttime = time(long *)0) + 300;
\& outj.h.bj_times.tc_repeat = TC_MINUTES;
\& outj.h.bj_times.tc_rate = 10;
\& outj.h.bj_times.tc_nposs = TC_SKIP;
\&
\& gbatch_puttitle(&outj, "MyTitle");
\&
\& outf = gbatch_jobadd(fd, &outj);
\& if  (!outf)  {  /* error in gbatch_dataerror */
\&    . . .
\& }
\&
\& while ((ch = getchar()) != EOF)
\&     putc(ch, outf);
\& fclose(outf);
\& ret = gbatch_jobres(fd, &jn);
\& if (ret < 0) {  /* error in ret */
\&     . . .
\& }
\& else
\&     printf("job number is %ld\en", jn);
\&
\& gbatch_close(fd);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgbatch_ciread\fR\|(3),
\&\fIgbatch_delarg\fR\|(3),
\&\fIgbatch_delenv\fR\|(3),
\&\fIgbatch_delredir\fR\|(3),
\&\fIgbatch_getarg\fR\|(3),
\&\fIgbatch_getdirect\fR\|(3),
\&\fIgbatch_getenv\fR\|(3),
\&\fIgbatch_getenvlist\fR\|(3),
\&\fIgbatch_getredir\fR\|(3),
\&\fIgbatch_gettitle\fR\|(3),
\&\fIgbatch_jobchgrp\fR\|(3),
\&\fIgbatch_jobchmod\fR\|(3),
\&\fIgbatch_jobchown\fR\|(3),
\&\fIgbatch_jobdata\fR\|(3),
\&\fIgbatch_jobdel\fR\|(3),
\&\fIgbatch_jobfind\fR\|(3),
\&\fIgbatch_joblist\fR\|(3),
\&\fIgbatch_jobmon\fR\|(3),
\&\fIgbatch_jobop\fR\|(3),
\&\fIgbatch_jobread\fR\|(3),
\&\fIgbatch_jobupd\fR\|(3),
\&\fIgbatch_putarg\fR\|(3),
\&\fIgbatch_putarglist\fR\|(3),
\&\fIgbatch_putdirect\fR\|(3),
\&\fIgbatch_putenv\fR\|(3),
\&\fIgbatch_putenvlist\fR\|(3),
\&\fIgbatch_putredir\fR\|(3),
\&\fIgbatch_putredirlist\fR\|(3),
\&\fIgbatch_puttitle\fR\|(3),
\&\fIgbatch_setqueue\fR\|(3),
\&\fIgbatch_varlist\fR\|(3),
\&\fIgbatch_varread\fR\|(3).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009 Free Software Foundation, Inc.
This is free software. You may redistribute copies of it under the
terms of the \s-1GNU\s0 General Public License
<http://www.gnu.org/licenses/gpl.html>.
There is \s-1NO\s0 \s-1WARRANTY\s0, to the extent permitted by law.
.SH "AUTHOR"
.IX Header "AUTHOR"
John M Collins, Xi Software Ltd.
