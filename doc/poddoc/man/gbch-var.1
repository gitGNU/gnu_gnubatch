.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GBCH-VAR 1"
.TH GBCH-VAR 1 "2009-05-18" "GNUbatch Release 1" "GNUbatch Batch Scheduler"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gbch\-var \- access batch variables from shell
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBgbch-var\fR
[ \fI\-options\fR ]
\&\fIvariable name\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBgbch-var\fR is a shell level tool to display, create, delete, modify or test the
values of \fBGNUbatch\fR variables. Testing may be \*(L"atomic\*(R", in the sense
that if two or more users attempt to assign new values to the same variable
conditional on a test, only one will \*(L"win\*(R".
.SH "OPTIONS"
.IX Header "OPTIONS"
Note that the order of treatment, letters and keywords described below
may be modified by editing the file \fIbtrest.help\fR \- see \fIbtsyntax\fR\|(5).
.PP
The environment variable on which options are supplied is \f(CW\*(C`GBCH_VAR\*(C'\fR and the
environment variable to specify the help file is \f(CW\*(C`BTRESTCONF\*(C'\fR.
.IP "\-? or +explain" 4
.IX Item "-? or +explain"
causes a summary of the other options to be displayed without taking
further action.
.IP "\-C or +create" 4
.IX Item "-C or +create"
Create the variable if it doesn't exist. An initial value should be
supplied using the \fB\-s\fR option.
.IP "\-c \fIstring\fR or +comment \fIstring\fR" 4
.IX Item "-c string or +comment string"
Assign or update the given comment field of the variable to be
\&\fIstring\fR.
.IP "\-D or +delete" 4
.IX Item "-D or +delete"
Delete the variable.
.IP "\-E or +set\-export" 4
.IX Item "-E or +set-export"
Mark the variable as \*(L"exported\*(R", i.e. visible to other hosts.
.IP "\-G \fIgroup\fR or +set\-group \fIgroup\fR" 4
.IX Item "-G group or +set-group group"
Change the group ownership of the variable to \fIgroup\fR.
.IP "\-K or +cluster" 4
.IX Item "-K or +cluster"
Set the \*(L"clustered\*(R" marker on the variable. When used in conditions or
assignments, the local version is used.
.IP "\-k or +no\-cluster" 4
.IX Item "-k or +no-cluster"
Reset the \*(L"clustered\*(R" marker on the variable.
.IP "\-L or +set\-local" 4
.IX Item "-L or +set-local"
Mark the variable as local to the host only. This is the default for
new variables, for existing variables it will turn off the export flag
if it is specified. To leave existing variables unaffected, invoke the
\&\fB\-N\fR flag.
.IP "\-M \fImode\fR or +set\-mode \fImode\fR" 4
.IX Item "-M mode or +set-mode mode"
Set the mode (permissions) on the variable.
.IP "\-N or +reset\-export" 4
.IX Item "-N or +reset-export"
Reset the \fB\-L\fR and \fB\-E\fR options. For new variables this will restore
to the default of local only. For existing variables this will mean
that the export flag is left unchanged.
.IP "\-o or +reset\-cluster" 4
.IX Item "-o or +reset-cluster"
Reset the \fB\-k\fR and \fB\-K\fR options. For new variables this will restore
to the default of not clustered. For existing variables this will mean
that the cluster flag is left unchanged.
.IP "\-S or +force\-string" 4
.IX Item "-S or +force-string"
Force all set values to string even if they appear numeric.
.IP "\-s \fIvalue\fR or +set\-value \fIvalue\fR" 4
.IX Item "-s value or +set-value value"
Assign the given \fIvalue\fR to the variable.
.IP "\-U \fIuser\fR or +set\-owner \fIuser\fR" 4
.IX Item "-U user or +set-owner user"
Change the ownership of the variable to \fIuser\fR.
.IP "\-u \fIvalue\fR or +undefined\-value \fIvalue\fR" 4
.IX Item "-u value or +undefined-value value"
In the test operations, if the variable does not exist, treat it as if
it did exist and had the given \fIvalue\fR.
.IP "\-X or +cancel" 4
.IX Item "-X or +cancel"
cancel options \fB\-S\fR, \fB\-C\fR, \fB\-D\fR, \fB\-s\fR and \fB\-u\fR.
.IP "+freeze\-current" 4
.IX Item "+freeze-current"
Save the current options in a \fI.gnubatch\fR file in the current
directory with keyword \f(CW\*(C`BTVAR\*(C'\fR. Comparison options are not included.
.IP "+freeze\-home" 4
.IX Item "+freeze-home"
Save all the current options in a \fI.gnubatch\fR file in the user's home
directory with keyword \f(CW\*(C`BTVAR\*(C'\fR. Comparison options are not included.
.SH "CONDITIONS"
.IX Header "CONDITIONS"
The six conditions \f(CW\*(C`+eq\*(C'\fR, \f(CW\*(C`+ne\*(C'\fR, \f(CW\*(C`+gt\*(C'\fR, \f(CW\*(C`+ge\*(C'\fR, \f(CW\*(C`+lt\*(C'\fR \f(CW\*(C`+le\*(C'\fR
followed by a constant compare the variable value with the constant
specified. The constant is assumed to be on the right of the
comparison, for example:
.PP
.Vb 1
\&        gbch\-var +gt 4 myvar
.Ve
.PP
Returns an exit code of zero (\*(L"true\*(R" to the shell) if \f(CW\*(C`myvar\*(C'\fR is
greater than 4, or 1 (\*(L"false\*(R" to the shell) if it is less than or
equal to 4. (Some other exit code would be returned if \f(CW\*(C`myvar\*(C'\fR did
not exist.
.PP
This may be combined with other options, for example
.PP
.Vb 1
\&        gbch\-var \-D +gt 100 myvar
.Ve
.PP
Would delete \f(CW\*(C`myvar\*(C'\fR only if its value was greater than 100.
.PP
.Vb 1
\&        gbch\-var \-s 1 +le 0 myvar
.Ve
.PP
Would assign 1 to \f(CW\*(C`myvar\*(C'\fR only if its previous value was less than or
equal to 0. Exit code 0 (shell \*(L"true\*(R") would be returned if the test
succeeded and the other operation was completed successfully, exit
code 1 (shell \*(L"false\*(R") would be returned if the test failed and
nothing was done, or some other error if the variable did not exist or
the operation was not permitted.
.PP
The test is \*(L"atomic\*(R" in the sense that a diagnostic will occur,
and no assignment made, if some other process sets the value in
between the test and the assignment (or other change).
.PP
The condition \fImust\fR follow all other options.
.PP
\&\fB+eq\fR, \fB+ne\fR, \fB+lt\fR and \fB+gt\fR may be represented as \fB\-e\fR, \fB\-n\fR,
\&\fB\-l\fR and \fB\-g\fR but this is not particularly recommended, especially
for the last two.
.SS "Use of options"
.IX Subsection "Use of options"
With no options, then the current value of the variable is printed,
for example:
.PP
.Vb 1
\&        gbch\-var abc
.Ve
.PP
prints out the value of variable \f(CW\*(C`abc\*(C'\fR.
.PP
To assign a value, the \fB\-s\fR option should be used, thus
.PP
.Vb 1
\&        gbch\-var \-s 29 abc
.Ve
.PP
assigns the numeric value 29 to \f(CW\*(C`abc\*(C'\fR.
.PP
Remote variables are referred to as follows:
.PP
.Vb 1
\&        gbch\-var \-s 32 host2:def
.Ve
.PP
assigns 32 to variable \f(CW\*(C`def\*(C'\fR on \f(CW\*(C`host2\*(C'\fR.
.PP
The conditional options should be the last to be specified.
.PP
The \fB\-u\fR option may be used to specify a value to substitute for a
non-existent variable in a test rather than reporting an error, for
example:
.PP
.Vb 1
\&        gbch\-var \-u 10 \-gt 5 myvar
.Ve
.PP
will compare \f(CW\*(C`myvar\*(C'\fR with 5 if it exists. If it does not exist, then
it will compare the given value, in this case 10, with 5, and in this
case return \*(L"true\*(R". There should not be a diagnostic unless there is a
completely different error.
.SS "Note on mode and owner changes"
.IX Subsection "Note on mode and owner changes"
Changing various parameters, the mode (permissions), the owner and the
group are done as separate operations.
.PP
In some cases changing the mode may prevent the next operation from
taking place. In other cases it may need to be done first.
.PP
Similar considerations apply to changes of the owner and the group.
.PP
\&\fBBtvar\fR does not attempt to work out the appropriate order to
perform the operations, the user should execute separate \fBgbch-var\fR
commands in sequence to achieve the desired effect.
.SH "FILES"
.IX Header "FILES"
\&\fI~/.gnubatch\fR
configuration file (home directory)
.PP
\&\fI.gnubatch\fR
configuration file (current directory)
.PP
\&\fIbtrest.help\fR
message file
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1GBCH_VAR\s0" 4
.IX Item "GBCH_VAR"
space-separated options to override defaults.
.IP "\s-1BTRESTCONF\s0" 4
.IX Item "BTRESTCONF"
location of alternative help file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgbch\-q\fR\|(1),
\&\fIgbch\-vlist\fR\|(1),
\&\fIbtsyntax\fR\|(5),
\&\fIgbch\-cvlist\fR\|(8).
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Various diagnostics are read and printed as required from the message
file \fIbtrest.help\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009 Free Software Foundation, Inc.
This is free software. You may redistribute copies of it under the
terms of the \s-1GNU\s0 General Public License
<http://www.gnu.org/licenses/gpl.html>.
There is \s-1NO\s0 \s-1WARRANTY\s0, to the extent permitted by law.
.SH "AUTHOR"
.IX Header "AUTHOR"
John M Collins, Xi Software Ltd.
